<?xml version="1.0" encoding="UTF-8"?>
<record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>sn_customerservice_case</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Case Notification Filter</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/ ) {
	//Query the notification_keywords table	

	// Email addresses
	var emailAddress1;
	var emailAddress2;
	var emailAddress3;
	var emailAddresses;
	var keyword;
	var priority1;
	var priorities = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];

	//Queue name 
	var queueName = 'x_197131_sensiple.CaseNotificationEvent';	
	var isNotify = false;
	var incidentNumber = current.getValue('number');	
	var shortDescription = current.getValue('short_description').replace(/[^\w\s]/gi, '').toLowerCase();
	var splittedShortDescription = shortDescription.split(/[ ,]+/);

	for (var a = 0; a < priorities.length; a++) {
		var notificationKeywordRecord = new GlideRecord('x_197131_sensiple_notification_keywords');
		notificationKeywordRecord.addQuery('priority', '=', priorities[a]);
		notificationKeywordRecord.query();
		while (notificationKeywordRecord.next()) {
			var priority = notificationKeywordRecord.getValue('priority');
			
			if (priorities[a] == priority) {

				var keywords = notificationKeywordRecord.getValue('keywords').toLowerCase();
				var splittedWords = keywords.split(/[ ,]+/);

				for (var x = 0; x < splittedWords.length; x++) {
					for (var y = 0; y < splittedShortDescription.length; y++) {

						if (splittedWords[x] == splittedShortDescription[y]) {

							isNotify = true;
							keyword = splittedWords[x];
							priority1 = priority;
							emailAddress1 = notificationKeywordRecord.getValue('email_address1');
							emailAddress2 = notificationKeywordRecord.getValue('email_address2');
							emailAddress3 = notificationKeywordRecord.getValue('email_address3');
							emailAddresses = emailAddress1 + ", " + emailAddress2 + ", " + emailAddress3;
							break;
						}
					}
				}				
			}
		}
	}

	if (isNotify) {

		var notificationLogs = new GlideRecord('x_197131_sensiple_notificationlogs');
		notificationLogs.incident_number = incidentNumber;
		notificationLogs.email_addresses = emailAddresses;
		notificationLogs.short_description = current.getValue('short_description');
		notificationLogs.keywords = keyword;
		notificationLogs.caller_id = current.getValue('caller_id');
		notificationLogs.priority = priority1;
		notificationLogs.insert();

		var caseUpdate = new GlideRecord("sn_customerservice_case");
		caseUpdate.addQuery('number', '=', current.getValue('number'));
		caseUpdate.query();
		while (caseUpdate.next()) {
			caseUpdate.x_197131_sensiple_cpu_alert_indicator = priority1;
			caseUpdate.update();
		}

		gs.eventQueue(queueName, current, emailAddress1, incidentNumber);
		gs.addInfoMessage('email1');
		
		if (emailAddress2) {
			gs.addInfoMessage('email2');
			gs.eventQueue(queueName, current, emailAddress2, incidentNumber);
		}
		if (emailAddress3) {
			gs.addInfoMessage('email3');
			gs.eventQueue(queueName, current, emailAddress3, incidentNumber);
		}
		//current.setAbortAction(true);
	} else {
		var caseUpdate1 = new GlideRecord("sn_customerservice_case");
		caseUpdate1.addQuery('number', '=', current.getValue('number'));
		caseUpdate1.query();
		while (caseUpdate1.next()) {
			caseUpdate1.x_197131_sensiple_cpu_alert_indicator = " ";
			caseUpdate1.update();
		}
	}

})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-04-13 13:40:42</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>726454c0db651300506e5ff0cf961900</sys_id>
        <sys_mod_count>7</sys_mod_count>
        <sys_name>Case Notification Filter</sys_name>
        <sys_overrides/>
        <sys_package display_value="Churn Prevention Utility" source="x_197131_sensiple">496fd019db051300506e5ff0cf961935</sys_package>
        <sys_policy/>
        <sys_scope display_value="Churn Prevention Utility">496fd019db051300506e5ff0cf961935</sys_scope>
        <sys_update_name>sys_script_726454c0db651300506e5ff0cf961900</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2018-04-16 10:02:37</sys_updated_on>
        <template/>
        <when>after</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=726454c0db651300506e5ff0cf961900"/>
</record_update>
